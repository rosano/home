{{ $dir := "content-sources/lyrics" }}
{{ range readDir $dir }}
  {{ $filename := .Name }}
  
  {{ if in (slice "." "_") (substr $filename 0 1) }}
    {{ continue }}
  {{ end }}

  {{ $parts := split (readFile (path.Join $dir $filename)) "---" }}
  
  {{ $params := unmarshal (index $parts 1) }}
  {{ $collectionSlug := default (path.BaseName $filename) (index $params "slug") }}

  {{ range $i, $v := split (delimit (after 2 $parts) "---") "\n# " }}
    {{ $content := strings.TrimSpace $v }}

    {{ if eq $content "" }}
      {{ continue }}
    {{ end }}
    
    {{ $lines := split $content "\n" }}

    {{ $titleMatch := index $lines 0 }}
    {{ $title := cond (eq (substr $titleMatch 0 1) "~") (substr $titleMatch 1) (lower $titleMatch) }}
    {{ $slug := delimit (complement (slice "") (split ($title | anchorize) "-")) "-" }}
    {{ $content = strings.TrimSpace (delimit (after 1 $lines) "\n") }}

    {{ $params = merge $params (dict
      "filename" $filename
      "extra" ""
    ) }}
    
    {{ $headingMatch := (index (findRE `\n(##.+)` $content) 0) }}
    {{ if $headingMatch }}
      {{ $heading := lower (substr $headingMatch 1) }}
      {{ $parts := split $content $headingMatch }}
      {{ $extra := strings.TrimSpace (print $headingMatch (index $parts 1)) }}
      {{ $content = index $parts 0 }}
      
      {{ $params = merge $params (dict
        "extra" (replace $extra "## " "#### ")
      ) }}
    {{ end }}

    {{ $.AddPage (dict
      "content" (dict "mediaType" "text/markdown" "value" (strings.TrimSpace $content))
      "title" $title
      "kind" "page"
      "slug" $slug
      "params" $params
      "weight" (math.Sum $i 1)
      "path" (print $collectionSlug "/" $slug)
    ) }}
  {{ end }}
{{ end }}
